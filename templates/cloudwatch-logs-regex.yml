AWSTemplateFormatVersion: "2010-09-09"
Description: This template builds the necessary lambda infra to send cloudwatch logs to honeycomb
Parameters: 
  Environment: 
    Type: String
    Default: ''
    Description: Name of environment, if applicable
  HoneycombWriteKey: 
    Type: String
    Description: Your honeycomb write key
  HoneycombAPIHost: 
    Type: String
    Default: https://api.honeycomb.io
    Description: Optionally set an alternative API host
  HoneycombDataset: 
    Type: String
    Default: honeycomb-cloudwatch-logs
    Description: Target honeycomb dataset
  HoneycombSampleRate: 
    Type: Number
    Default: 1
    Description: Sample rate
  LogGroupName:
    Type: String
    Description: The name of the AWS cloudwatch log group you want to subscribe to
  RegexPattern:
    Type: String
    Description: Regex pattern used to match lines
  HandlerVersion:
    Type: String
    Default: 'LATEST'
    Description: Optional desired version of the cloudwatch handler to use.
Resources:
  CloudwatchLambdaHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: honeycomb-builds
        S3Key:
          "Fn::Join":
            - ''
            -
              - honeycombio/serverless-ingest-poc/ingest-handlers-
              - !Ref HandlerVersion
              - .zip
      Description: Lambda function for sending cloudwatch logs to Honeycomb
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PARSER_TYPE: regex
          REGEX_PATTERN: !Ref RegexPattern
          HONEYCOMB_WRITE_KEY: !Ref HoneycombWriteKey
          API_HOST: !Ref HoneycombAPIHost
          DATASET: !Ref HoneycombDataset
          SAMPLE_RATE: !Ref HoneycombSampleRate
      FunctionName: 
        "Fn::Join":
          - '-'
          -
            - CloudwatchLambdaHandler
            - !Ref "AWS::StackName"
      Handler: cloudwatch-handler
      MemorySize: 128
      Role:
        "Fn::GetAtt":
          - LambdaIAMRole
          - Arn
      Runtime: go1.x
      Timeout: 10
  ExecutePermission:
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName:
        "Fn::GetAtt":
          - CloudwatchLambdaHandler
          - Arn
      Principal: 'logs.amazonaws.com'
  CloudwatchSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudwatchLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName
      FilterPattern: ''
    DependsOn: ExecutePermission
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  LambdaRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "foo"
      Roles: 
          - Ref: LambdaIAMRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
